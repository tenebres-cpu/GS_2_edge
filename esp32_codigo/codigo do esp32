#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

// === CONFIGURAÇÕES DO WIFI ===
const char* ssid = "Marcelo Quarto";
const char* password = "marcelo123";

// === CONFIGURAÇÕES DO MQTT ===
const char* mqtt_server = "broker.hivemq.com";
const int mqtt_port = 1883;   // Porta MQTT TCP
const char* mqtt_topic = "fiware/sensor/dht11";


// === CONFIGURAÇÃO DO DHT ===
#define DHTPIN 4        // Pino onde o DHT está conectado
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// === CLIENTES ===
WiFiClient espClient;
PubSubClient client(espClient);

// === FUNÇÕES ===
void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Conectando a ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi conectado");
  Serial.print("IP local: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Tentando conectar ao broker MQTT...");
    if (client.connect("ESP32Client")) {
      Serial.println("Conectado!");
    } else {
      Serial.print("Falhou, rc=");
      Serial.print(client.state());
      Serial.println(" tentando novamente em 5 segundos");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  dht.begin();
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  float temp = dht.readTemperature();
  float hum = dht.readHumidity();

  if (isnan(temp) || isnan(hum)) {
    Serial.println("Falha na leitura do DHT!");
    return;
  }

  // Criar JSON com os dados
  String payload = "{\"temperature\": " + String(temp) + ", \"humidity\": " + String(hum) + "}";
  Serial.print("Enviando: ");
  Serial.println(payload);

  client.publish(mqtt_topic, payload.c_str());

  delay(5000); // Envia a cada 5 segundos
}
